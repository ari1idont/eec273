from mininet.net import Mininet
from mininet.topo import Topo
from mininet.cli import CLI
from mininet.node import RemoteController
from mininet.node import Controller
from mininet.node import OVSKernelSwitch
#host and switches as per topology - 24 hosts, 24 switches



class topology(Topo):

  def __init__(self,**opts):

    Topo.__init__(self,**opts)

    s1=self.addSwitch('s1')
    s2=self.addSwitch('s2')
    s3=self.addSwitch('s3')
    s4=self.addSwitch('s4')
    s5=self.addSwitch('s5')
    s6=self.addSwitch('s6')
    s7=self.addSwitch('s7')
    s8=self.addSwitch('s8')
    s9=self.addSwitch('s9')
    s10=self.addSwitch('s10')
    s11=self.addSwitch('s11')
    s12=self.addSwitch('s12')
    s13=self.addSwitch('s13')
    s14=self.addSwitch('s14')
    s15=self.addSwitch('s15')
    s16=self.addSwitch('s16')
    s17=self.addSwitch('s17')
    s18=self.addSwitch('s18')
    s19=self.addSwitch('s19')
    s20=self.addSwitch('s20')
    s21=self.addSwitch('s21')
    s22=self.addSwitch('s22')
    s23=self.addSwitch('s23')
    s24=self.addSwitch('s24')

    h1=self.addHost('h1')
    h2=self.addHost('h2')
    h3=self.addHost('h3')
    h4=self.addHost('h4')
    h5=self.addHost('h5')
    h6=self.addHost('h6')
    h7=self.addHost('h7')
    h8=self.addHost('h8')
    h9=self.addHost('h9')
    h10=self.addHost('h10')
    h11=self.addHost('h11')
    h12=self.addHost('h12')
    h13=self.addHost('h13')
    h14=self.addHost('h14')
    h15=self.addHost('h15')
    h16=self.addHost('h16')
    h17=self.addHost('h17')
    h18=self.addHost('h18')
    h19=self.addHost('h19')
    h20=self.addHost('h20')
    h21=self.addHost('h21')
    h22=self.addHost('h22')
    h23=self.addHost('h23')
    h24=self.addHost('h24')

    self.addLink(s1,s2)
    self.addLink(s2,s3)
    self.addLink(s3,s4)
    self.addLink(s1,s3)
    self.addLink(s4,s5)
    self.addLink(s5,s6)
    self.addLink(s2,s7)
    self.addLink(s3,s8)
    self.addLink(s3,s9)
    self.addLink(s4,s9)
    self.addLink(s4,s10)
    self.addLink(s5,s11)
    self.addLink(s6,s12)
    self.addLink(s7,s8)
    self.addLink(s8,s9)
    self.addLink(s9,s10)
    self.addLink(s10,s11)
    self.addLink(s11,s12)
    self.addLink(s7,s13)
    self.addLink(s7,s15)
    self.addLink(s8,s13)
    self.addLink(s8,s16)
    self.addLink(s9,s17)
    self.addLink(s10,s18)
    self.addLink(s11,s19)
    self.addLink(s11,s14)
    self.addLink(s12,s14)
    self.addLink(s14,s19)
    self.addLink(s14,s20)
    self.addLink(s13,s15)
    self.addLink(s15,s16)
    self.addLink(s16,s17)
    self.addLink(s17,s18)
    self.addLink(s18,s19)
    self.addLink(s19,s20)
    self.addLink(s17,s21)
    self.addLink(s21,s22)
    self.addLink(s22,s23)
    self.addLink(s20,s23)
    self.addLink(s24,s4)
    self.addLink(s24,s6)


    self.addLink(s1,h1)
    self.addLink(s2,h2)
    self.addLink(s3,h3)
    self.addLink(s4,h4)
    self.addLink(s5,h5)
    self.addLink(s6,h6)
    self.addLink(s7,h7)
    self.addLink(s8,h8)
    self.addLink(s9,h9)
    self.addLink(s10,h10)
    self.addLink(s11,h11)
    self.addLink(s12,h12)
    self.addLink(s13,h13)
    self.addLink(s14,h14)
    self.addLink(s15,h15)
    self.addLink(s16,h16)
    self.addLink(s17,h17)
    self.addLink(s18,h18)
    self.addLink(s19,h19)
    self.addLink(s20,h20)
    self.addLink(s21,h21)
    self.addLink(s22,h22)
    self.addLink(s23,h23)
    self.addLink(s24,h24)




topos={'usa':(lambda:topology())}